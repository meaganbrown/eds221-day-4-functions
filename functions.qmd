---
title: "functions"
format: html
editor: visual
---

### Load libraries

```{r}
library(tidyverse)
```

# Function Examples

```{r}

exclaim_age <- function(age) {
  print(paste("I am", age, "years old!"))
}

exclaim_age(age = 10)

# function in python
# def exclaim_age(age):
#   print("I am", str(age), "years old!")
# 
# exclaim_age(age = 10)
```

# Naming Functions

Functions should be verbs ("get", "compute", "calculate", "determine" and arguments should be nouns

### Code WarmUp

```{r}
# You run 2 miles, and these are your quarter mile splits (in minutes)

quarter_splits <- c(1.0, 1.1, 1.2, 1.1, 1.4, 1.5, 1.6, 1.4)

# Write a for loop that returns your total time for any two consecutive quarter miles (hint: the first is 1.0 + 1.1, the second is 1.1 + 1.2)

for (i in seq_along(quarter_splits)) {
  half_time <- quarter_splits[i] + quarter_splits[i + 1]
  print(half_time)
}
```

# A function with conditions

```{r}
# We can combine a function with conditional statements

animal <- c("dog", "goat")
age <- 3

animal_age <- function(animal, age) {
  if (animal == "dog") {
    print(age * 7)
  } else if (animal == "goat") {
    print(age * 4.7)
  }
}

animal_age("dog", 5)
```

# Intro to functions

Make a function to double the user input

```{r}
double_this <- function(my_value) {
  print(2 * my_value)
}

double_this(my_value = 4)
double_this(c(1, 2, 10, 100, 175))
```

Your turn: write a function that asks for a users name and age and returns an returns an exclamation, like "I'm Name, AND i am \[age\] years old."

```{r}

exclaim_age <- function(your_name, your_age) {
  print(paste("My name is", your_name, "and my age is", your_age, "!"))
}

exclaim_age(your_name = "Mary", your_age = 3)
```

```{r}
convert_animal_age <- function(animal, human_age) {
  if(animal == "dog") {
    print(human_age * 7) 
     } else if (animal == "goat") {
        print(human_Age * 4.7)
     } else{
    print("Please enter goat or dog for animal")
  }
}

convert_animal_age(animal = "bear", human_age = 5)
```

```{r}
dog_choice <- tribble(
  ~dog_name, ~food, 
  "Khora", "everything",
  "Teddy", "salmon",
  "Waffle", "pancakes",
  "Banjo", "chicken"
)

dog_menu <- function(name) {
  my_subset <- filter(dog_choice, 
                      dog_name == name)
  print(paste("My name is", 
              my_subset$dog_name, 
              "and my fav food is", 
              my_subset$food))
}

dog_menu(name = "Waffle")

```

# Functions meet for loops \<3

```{r}
means_over_columns <- function(df) {
  for(i in seq_along(df)) {
    col_mean <- mean(df[[i]], 
                     na.rm = TRUE)
    column_name <- colnames(df[i])
    print(paste("The mean value of", 
          column_name, "is", 
          col_mean))
  }
}

means_over_columns(mtcars)
```
